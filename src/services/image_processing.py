from rembg import new_session, remove


class ImageProcessor:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ–Ω–∞.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç multiple –º–æ–¥–µ–ª–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.
    """

    # –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏
    AVAILABLE_MODELS: list[dict[str, str]] = [
        {
            "name": "u2net_human_seg",
            "description": "–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ª—é–¥–µ–π (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)",
            "best_for": ["–ø–æ—Ä—Ç—Ä–µ—Ç—ã", "—Å–µ–ª—Ñ–∏", "–≥—Ä—É–ø–ø–æ–≤—ã–µ —Ñ–æ—Ç–æ"],
        },
        {
            "name": "u2net",
            "description": "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –ª—é–±—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
            "best_for": ["–ª—é–¥–∏", "–∂–∏–≤–æ—Ç–Ω—ã–µ", "–ø—Ä–µ–¥–º–µ—Ç—ã"],
        },
        {
            "name": "isnet-general-use",
            "description": "–¢–æ—á–Ω–∞—è –º–æ–¥–µ–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ ISNet",
            "best_for": ["–ª—é–¥–∏", "–≤—ã—Å–æ–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å"],
        },
        {
            "name": "u2netp",
            "description": "–û–±–ª–µ–≥—á–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏",
            "best_for": ["–ø—Ä–æ—Å—Ç—ã–µ –æ–±—ä–µ–∫—Ç—ã", "—Å–∫–æ—Ä–æ—Å—Ç—å"],
        },
    ]

    def __init__(self, model_name: str = "u2net_human_seg"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª—å—é.

        Args:
            model_name (str): –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∏–∑ AVAILABLE_MODELS
        """
        self.model_name = model_name
        self.session = None
        self._initialize_session()

    def _initialize_session(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–µ—Å—Å–∏—é –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª—å—é"""
        try:
            self.session = new_session(self.model_name)
            print(f"‚úÖ –°–µ—Å—Å–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å –º–æ–¥–µ–ª—å—é: {self.model_name}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏ {self.model_name}: {e}")
            # Fallback –Ω–∞ –º–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            self.session = new_session("u2net")
            self.model_name = "u2net"
            print("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –º–æ–¥–µ–ª—å: u2net")

    def get_available_models(self) -> list[dict[str, str]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"""
        return self.AVAILABLE_MODELS

    def get_model_info(self, model_name: str) -> dict[str, str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏"""
        for model in self.AVAILABLE_MODELS:
            if model["name"] == model_name:
                return model
        return {}

    def set_model(self, model_name: str) -> bool:
        """
        –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –º–æ–¥–µ–ª—å –æ–±—Ä–∞–±–æ—Ç–∫–∏.

        Args:
            model_name (str): –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏

        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
        """
        if model_name == self.model_name:
            return True  # –£–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —ç—Ç–∞ –º–æ–¥–µ–ª—å

        try:
            new_session_instance = new_session(model_name)
            self.session = new_session_instance
            self.model_name = model_name
            print(f"‚úÖ –ú–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {model_name}")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã –º–æ–¥–µ–ª–∏ –Ω–∞ {model_name}: {e}")
            return False

    async def remove_background(self, image_path: str, output_path: str) -> bool:
        """
        –£–¥–∞–ª—è–µ—Ç —Ñ–æ–Ω —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É—è —Ç–µ–∫—É—â—É—é –º–æ–¥–µ–ª—å.

        Args:
            image_path (str): –ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
            output_path (str): –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞

        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
        """
        try:
            print(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–æ–¥–µ–ª—å—é: {self.model_name}")

            with open(image_path, "rb") as input_file:
                image_bytes = input_file.read()
                output_bytes = remove(image_bytes, session=self.session)

                with open(output_path, "wb") as output_file:
                    output_file.write(output_bytes)

            print(f"‚úÖ –§–æ–Ω —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ (–º–æ–¥–µ–ª—å: {self.model_name})")
            return True

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–æ–¥–µ–ª—å—é {self.model_name}: {e}")
            return False


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å –º–æ–¥–µ–ª—å—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
image_processor = ImageProcessor("u2net_human_seg")
